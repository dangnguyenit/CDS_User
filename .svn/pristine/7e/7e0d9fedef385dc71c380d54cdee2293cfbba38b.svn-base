var popover
var click
var element
$(document).ready(function() {

	UserPA.render_about(user_id)
	UserPA.render_recently_added(user_id);
	UserPA.render_all_slot(user_id)
	UserPA.render_short_term_objective(user_id)
	UserPA.handle_popover()

	UserPA.calculate_current_title(user_id)

	//Get context with jQuery - using jQuery's .get() method.
	var ctx = $("#myChart").get(0).getContext("2d");
	//This will get the first returned node in the jQuery collection.
	var myNewChart = new Chart(ctx).Radar(data);


	target_date = $("#target_date").bdatepicker({
    format: 'dd/mm/yyyy',
    autoclose: true,
    setStartDate: $("#target_date").val(),
    startDate: $("#target_date").val(),
  })

  class_target_date = $(".target_date").bdatepicker({
    format: 'dd/mm/yyyy',
    autoclose: true,
    setStartDate: $(".target_date").val(),
    startDate: $(".target_date").val(),
  })



  $("#icon_datepicker").click(function() {
  	$("#target_date").bdatepicker('show')
  })

	// Validate User changes password
	forgot_password = $("#change_password_pop_up").validate({
    rules: {
    	"user[old_password]": {
        required: true,
        minlength: 6,
        maxlength: 50
      },
      "user[password]": {
        required: true,
        minlength: 6,
        maxlength: 50
      },
      "user[password_confirmation]": {
      	required: true,
        equalTo: "#user_password"
      },
      
    },
    messages: {
    	"user[old_password]": {
        required: I18n.t('required_fiedl'),
        minlength: I18n.t('minlength_msg', {field : I18n.t('user_management.j_email'), length: 6}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('user_management.j_email'), length: 50}),
      },
      "user[password]": {
        required: I18n.t('required_fiedl'),
        minlength: I18n.t('minlength_msg', {field : I18n.t('user_management.j_email'), length: 6}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('user_management.j_email'), length: 50}),
      },
      "user[password_confirmation]": {
      	required: I18n.t('required_fiedl'),
        equalTo: I18n.t('password_not_match')
      },
    },
    submitHandler: function(form) {  
      UserPA.change_password()
    },
    errorPlacement: function(error, element){
      error.appendTo(element.parent());
    }
  });

})

var data = {
	labels : ["Communication","Productivity","Problem Solving","Knowledge & Skills","Planning & Organizing"],
	datasets : [
	// Communication
	{ 
		fillColor : "#6AF731",
		strokeColor : "rgba(151,187,205,1)",
		pointColor : "rgba(151,187,205,1)",
		pointStrokeColor : "#fff",
		data : [communication,0,0,0,communication]
	},
	// Productivity
	{	
		fillColor : "#F7F131",
		strokeColor : "rgba(151,187,205,1)",
		pointColor : "rgba(151,187,205,1)",
		pointStrokeColor : "#fff",
		data : [productivity,productivity,0,0,0]
	},
	// Problem Solving
	{	
		fillColor : "#F76331",
		strokeColor : "rgba(151,187,205,1)",
		pointColor : "rgba(151,187,205,1)",
		pointStrokeColor : "#fff",
		data : [0,problem,problem,0,0]
	},
	// Knowledge & Skills
	{ 
		fillColor : "#318EF7",
		strokeColor : "rgba(220,220,220,1)",
		pointColor : "rgba(220,220,220,1)",
		pointStrokeColor : "#fff",
		data : [0,0,knowledge,knowledge,0]
	},
	// Planning & Organization
	{	
		fillColor : "#FA32BE",
		strokeColor : "rgba(151,187,205,1)",
		pointColor : "rgba(151,187,205,1)",
		pointStrokeColor : "#fff",
		data : [0,0,0,planing,planing]
	}
	]
}

var UserPA = {
	/**
  * Handle Popover
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {object} [obj] - User object
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	handle_popover : function () {
		$('.show_details').each(function () {
			popover = $('.show_details').popover({
				placement : 'bottom',
				title : "<button class='close pull-right' type='button' onclick=\"($('.show_details').popover('hide'))\">Ã—</button>",
				html: 'true',
				content : function() {
					return $('#slot_detail_popover').html();
				}
			});
		})
		

		$('body').on('click', function (e) {
	    $('.show_details').each(function () {
	      if (!$(this).is(e.target.parentNode.parentNode) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
	      	$(this).popover('hide');
	      } 

	    });
		});

		$("button.right-algin-content.btn.btn-icon.btn-default.glyphicons.remove_2").each(function() {
			$(this).on('click', function() {
				popover.popover('hide')
			})
		})

	},
	/**
  * Show pop-up Slot Details
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {element} [e] - Click
  * @param {text} [guideline] - Slot's guideline
  * @param {string} [text] - Type of slot
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	show_pop_up_slot_details : function (e, guideline, type) {
		$("#slot_detail_popover #name").html("")
		$("#slot_detail_popover #competency").html("")
		$("#slot_detail_popover #score_description").html("")
		$("#slot_detail_popover #scoring").html("")
		$("#slot_detail_popover .content")[0].style.color = "black"

		$("#slot_detail_popover #description_details").html("")
		$("#slot_detail_popover #guideline").html("")
		UserPA.set_slot_detail_values(e, guideline, type)
	},

	/**
  * Add details to  pop-up Slot Details
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {object} [e] - Clicked element
  * @param {text} [guideline] - Slot's guideline
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	set_slot_detail_values : function (e, guideline, type) {
		first_row = e.children[0]

		name = first_row.getElementsByClassName("name")[0].innerText
		competency = first_row.getElementsByClassName("competency_name")[0].innerText


		var scoring_description = ""
		var scoring = ""
		var color = ""

		if (first_row.getElementsByClassName("scoring_description")[0]) {
			scoring_description = first_row.getElementsByClassName("scoring_description")[0].innerText
		}
		if (first_row.getElementsByClassName("scoring")[0]) {
			scoring = first_row.getElementsByClassName("scoring")[0].innerText
		}
		if (first_row.getElementsByClassName("content")[0]) {
			color = first_row.getElementsByClassName("content")[0].style.color
		}

		// Set values first row
		$("#slot_detail_popover #name").html(name)
		$("#slot_detail_popover #competency").html(competency)
		$("#slot_detail_popover #score_description").html(scoring_description)
		$("#slot_detail_popover #scoring").html(scoring)
		$("#slot_detail_popover .content")[0].style.color = color

		widget = e
		description = widget.children[1].innerText
		$("#slot_detail_popover #description_details").html(description.replace("Description: ", ""))
		$("#slot_detail_popover #guideline").html(guideline.replace(/\. /g, ".</br>"))
	},

	/**
  * Render recently added
  *
  * @author DangNH <dangnh@elarion.com>
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	render_recently_added : function(id){
		$.ajax({
	    type: "GET",
	    async: false,
	    url: g_recentlyAddedPath,
	    data: {
	    	data: id,
	      authenticity_token: g_token},
	    success: function(data) {
	    	$("#recently_added").html(data)
	    	UserPA.handle_popover()
	    },
	    error: function(data) {
	     	CDS.show_notification("error", "Render Recently Added Failed")
	    }
	  });
	},

	/**
  * Render recently added
  *
  * @author DangNH <dangnh@elarion.com>
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	render_short_term_objective : function(id){
		$.ajax({
	    type: "GET",
	    async: false,
	    url: g_shortTermObjectivePath,
	    data: {
	    	data: id,
	      authenticity_token: g_token},
	    success: function(data) {
	    	$("#short_term_objective").html(data)
	    	// UserPA.handle_popover()
	    },
	    error: function(data) {
	     	CDS.show_notification("error", "Render Short Term Objective Failed")
	    }
	  });
	},

	/**
  * Render recently added
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - User's id
  * @param {string} [view_more_type] - View more type of long or short term
  * @param {string} [type] - Create comment or just render
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	render_about : function(id, view_more_type, type){
		$.ajax({
	    type: "GET",
	    async: false,
	    url: g_aboutPath,
	    data: {
	    	data: id,
	    	view_more: view_more_type,
	    	type: type,
	      authenticity_token: g_token},
	    success: function(data) {
	    	$("#about").html(data)
	    	$(".show_long_term").expander({
	    		slicePoint: 400,  // default is 100
	    	});
	    	$(".show_short_term").expander({
	    		slicePoint: 400,  // default is 100
	    	});
	    	$(".comments").expander({
	    		slicePoint: 150,  // default is 100
	    	});
	    	UserPA.handle_popover()
	    },
	    error: function(data) {
	     	CDS.show_notification("error", "Render About Failed")
	    }
	  });
	},

	/**
  * Render recently added
  *
  * @author DangNH <dangnh@elarion.com>
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	render_all_slot : function(id, type, page){
		$.ajax({
	    type: "GET",
	    async: false,
	    url: g_allSlotPath,
	    data: {
	    	data: id,
	    	type: type,
	    	page: page,
	      authenticity_token: g_token},
	    success: function(data) {
	    	$("#all_slot").html(data)
	    	UserPA.handle_popover()
	    	$(".competencies").each(function() {
					$(this).slideUp();
				})
				UserPA.set_number_for_competerncy();
	    },
	    error: function(data) {
	     	CDS.show_notification("error", "Render All Slot Failed")
	    }
	  });
	},

	/**
  * Delete Short Term Objective
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {element} [e] - Clicked element
  * @param {integer} [user_id] - User's id
  * @param {integer} [id] - Object's id
  * @param {string} [type] - Comment type
  * @param {string} [more_type] - Type to know to show more or less
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	render_comments : function (e, user_id, id, type, more_type) {
		$.ajax({
	    type: "GET",
	    async: false,
	    url: g_commentsPath,
	    data: {
	    	user_id: user_id,
	    	data: id,
	    	type: type,
	    	more_type: more_type,
	      authenticity_token: g_token},
	    success: function(data) {
	    	if (type == "short_term_objective") {
	    		$(".comment_" + id + ".short_term_objective_comments").html(data)
	    	}
	    	if (type == "evidence") {
	    		$(".comment_" + id + ".evidence_comments").html(data)
	    	}
	    	$(".comments").expander({
	    		slicePoint: 150,  // default is 100
	    	});
	    },
	    error: function(data) {
        CDS.show_notification("error", "Render Comments Failed")
	    }
	  });
	},



	/**
  * Show pop-up Change Password
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Object
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
  show_pop_up_change_password : function() {
    CDS.set_modal_position($('#change_password_modal'))
    $("#change_password_modal #password")[0].value = ''
    $("#change_password_modal #user_password")[0].value = ''
    $("#change_password_modal #password_confirmation")[0].value = ''
    forgot_password.resetForm();
    $('#change_password_modal #modalLabel').html("Change Your Password")
    $('#change_password_modal').modal();
  },

	/**
  * Create long term for user in recent term
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - InstancesTerms's id
 	* @param {string} [type] - Action's type
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	call_action_instances_term : function (id, type) {
		if (type == "long_create" || type == "long_edit") {
			value = $("#about textarea#long_term")[0].value
		}
		else {
			value = $("#about textarea#short_term")[0].value
		}

		if (value == "") {
			CDS.show_notification("error", "Please enter term's information")
		}
		else {
			$.ajax({
		    type: "POST",
		    async: false,
		    url: g_actionInstancesTermPath,
		    data: {
		    	data: id,
		    	type: type,
		    	value: value,
		      authenticity_token: g_token},
		    dataType: "json",
		    success: function(data) {
		    	UserPA.render_about(user_id)
		    },
		    error: function(data) {
		    	if (type == "long_create") {
		    		CDS.show_notification("error", "Long Term can not be created")
		    	}
		    	else {
		    		if (type == "short_create") {
		    			CDS.show_notification("error", "Short Term can not be created")
		    		}
		    		else {
		    			if (type == "long_edit") {
		    				CDS.show_notification("error", "Long Term can not be updated")
		    			}
		    			else {
		    				if (type == "short_edit") {
		    					CDS.show_notification("error", "Short Term can not be updated")
		    				}
		    			}
		    		}
		    	}
		     	
		    }
		  });
		}
	},

	/**
  * Remove recently add evidence
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {element} [e] - Clicked Element
  * @param {integer} [id] - Slot Assess's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	remove_recently_add_evidence : function (e, id) {

		bootbox.confirm("Are you sure you want to remove this evidence?", function(result) {
      if (result) {
        $.ajax({
			    type: "POST",
			    async: false,
			    url: g_removeEvidencePath,
			    data: {
			    	data: id,
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	$(".popover.fade.bottom.in").removeClass('in')
			    	UserPA.render_recently_added(user_id);
			    	UserPA.render_all_slot(user_id);
			    },
			    error: function(data) {
			     	CDS.show_notification("error", "Slot Assess can not be remove")
			    }
			  });  
      }
    });
	},

	/**
  * Show edit text box
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {string} [value] - Value to know which row will be edit
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	show_edit_box : function(value) {
		$("#about #" + value + " .show_hover")[0].style.display = 'none'
		$("#about #" + value + " .edit_hover")[0].style.display = 'inline'
		$("#about #" + value + " .hidden_icon")[0].style.display = 'none'
	},

	/**
  * Show edit textare for term information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {string} [value] - Value to know short or long term will be edit
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	show_edit_term_information : function(value) {
		$("#about .show_" + value)[0].style.display = 'none'
		$("#about .edit_" + value)[0].style.display = 'inline'
	},

	/**
  * Show edit textare for term information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {element} [e] - Clicked element
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	show_edit_short_term_objective : function(e) {
		e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("show_short_term_objective")[0].style.display = 'none'
		e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("hide_short_term_objective")[0].style.display = 'inline'
	},

	/**
  * Cancel Edit Term information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {string} [value] - Value to know short or long term will be edit
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	cancel_edit_term_information : function(value) {
		$("#about .edit_" + value)[0].style.display = 'none'
		$("#about .show_" + value)[0].style.display = 'inline'
	},

	/**
  * Cancel Edit Term information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {string} [value] - Value to know short or long term will be edit
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	cancel_edit_short_term_objective : function(e) {
		e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("hide_short_term_objective")[0].style.display = 'none'
		e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("show_short_term_objective")[0].style.display = 'inline'		
	},

	/**
  * Show edit textare for term information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {string} [value] - Value to know short or long term will be edit
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	show_edit_comment : function(element) {
		$(".hidden_comment").each(function () {
			click = element
			$(this)[0].style.display = 'none'
		})
		$(".show_comment").each(function () {
			$(this)[0].style.display = 'inline'
		})

		element.parentNode.parentNode.parentNode.parentNode.children[1].children[0].style.display = 'none'
		element.parentNode.parentNode.parentNode.parentNode.children[1].children[1].style.display = 'inline'
		// $("#about .show_" + value)[0].style.display = 'none'
		// $("#about .edit_" + value)[0].style.display = 'inline'
	},

	/**
  * Insert comment for term
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {event} [e] - Key event
  * @param {integer} [user_id] - User's id
  * @param {integer} [obj_id] - Object's id
  * @param {string} [comment_typer] - Comment type - current title or short term obj or evidence
  * @param {string} [sub_type] - Sub type for long or short term
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	insert_comment : function (e, element, user_id, obj_id, comment_type, sub_type) {
		if (e.keyCode == 13) {	
			rs = false

			comment = element.value
	  	if (comment == "" ) {
	  		CDS.show_notification("error", "Please Enter Comment")
	  	}
	  	else {
	  		rs = true
	  	}  	
		  
		  if (rs) {
		  	// Call ajax to add comment
			  $.ajax({
			    type: "POST",
			    async: false,
			    url: g_actionInstancesTermPath,
			    data: {
			    	data: user_id,
			    	obj_id: obj_id,
			    	comment_type: comment_type,
			    	sub_type: sub_type,
			    	comment: comment,
			    	type: "create_comment",
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	element.value = null
			    	if (comment_type == "short_term_objective_id") {
			    		// UserPA.render_short_term_objective(user_id);
			    		UserPA.render_comments(this, user_id ,obj_id, 'short_term_objective', 'true');
			    	}
			    	if (comment_type == "current_title_id") {
			    		UserPA.render_about(user_id, "", "create_" + sub_type );
			    	}  	
			    },
			    error: function(data) {
			    	string = data.responseJSON
		        result = ""
		        for(key in string) {
		          for(value in string[key]) {
		            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
		          }
		        }
		        CDS.show_notification("error", result)
			     	// CDS.show_notification("error", "An error occurred when inserting new comment")
			    }
			  });
		  }
		}
	},

	/**
  * Edit User's Information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {event} [e] - Key event
  * @param {integer} [id] - User's id
  * @param {string} [name] - User's attribute: name/emai/role
 	* @param {string} [type] - Action's type
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	edit_user_infomation : function (e, id, name, type) {
		if (e.keyCode == 13) {
			value = $("#about #" + name + " .edit_hover input").val()
	    $.ajax({
		    type: "POST",
		    async: false,
		    url: g_actionInstancesTermPath,
		    data: {
		    	data: id,
		    	type: type,
		    	value: value,
		      authenticity_token: g_token},
		    dataType: "json",
		    success: function(data) {
		    	$("#performance_appraisal #full_name").html(data.full_name)
		    	UserPA.render_about(user_id)
		    },
		    error: function(data) {
		     	string = data.responseJSON
	        result = ""
	        for(key in string) {
	          for(value in string[key]) {
	            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
	          }
	        }
	        CDS.show_notification("error", result)
		    }
		  });
	  }
	},

	/**
  * Delete User's information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Comment's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	delete_long_term : function (id) {
		bootbox.confirm("Are you sure you want to remove long term information?", function(result) {
      if (result) {
      	$.ajax({
			    type: "POST",
			    async: false,
			    url: g_actionInstancesTermPath,
			    data: {
			    	data: id,
			    	type: 'delete_long',
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	UserPA.render_about(user_id)
			    },
			    error: function(data) {
			     	string = data.responseJSON
		        result = ""
		        for(key in string) {
		          for(value in string[key]) {
		            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
		          }
		        }
		        CDS.show_notification("error", result)
			    }
			  });
      }
    });
	},

	/**
  * Delete User's information
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Comment's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	delete_short_term : function (id) {
		bootbox.confirm("Are you sure you want to remove short term information?", function(result) {
      if (result) {
      	$.ajax({
			    type: "POST",
			    async: false,
			    url: g_actionInstancesTermPath,
			    data: {
			    	data: id,
			    	type: 'delete_short',
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	UserPA.render_about(user_id)
			    },
			    error: function(data) {
			     	string = data.responseJSON
		        result = ""
		        for(key in string) {
		          for(value in string[key]) {
		            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
		          }
		        }
		        CDS.show_notification("error", result)
			    }
			  });
      }
    });
	},

	/**
  * Change User password
  *
  * @author DangNH <dangnh@elarion.com>
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	change_password : function () {
		old_password = $("#change_password_modal #password")[0].value
		new_password = $("#change_password_modal #user_password")[0].value
		user_id = $("#change_password_modal #user_id")[0].value

    $.ajax({
	    type: "POST",
	    async: false,
	    url: g_actionInstancesTermPath,
	    data: {
	    	data: user_id,
	    	type: 'change_password',
	    	old_pass: old_password,
	    	new_pass: new_password,
	      authenticity_token: g_token},
	    dataType: "json",
	    success: function(data) {
	    	$('#change_password_modal').modal('hide');
	    	CDS.show_notification("success", "Your password has been change successfully")
	    },
	    error: function(data) {
	    	if (data.responseText) {
	    		result = data.responseText;	
	    	}
	    	else {
	    		string = data.responseJSON
	        result = ""
	        for(key in string) {
	          for(value in string[key]) {
	            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
	          }
	        }
	    	}
		     	
        CDS.show_notification("error", result)
	    }
	  });
	},

	/**
  * Edit User's comment
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {event} [e] - Key event
  * @param {element} [element] - Clicked element
  * @param {integer} [id] - Comment's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	edit_comment : function (e, element, id) {
		if (e.keyCode == 27) {
  		element.parentNode.parentNode.parentNode.parentNode.children[0].style.display = 'inline'
			element.parentNode.parentNode.parentNode.parentNode.children[1].style.display = 'none'
	  } 
	  else {
	  	if (e.keyCode == 13) {
				value = element.value

				if (value == "") {
					CDS.show_notification("error", "Edit comment can not be left blank")
				}
				else {
					$.ajax({
				    type: "POST",
				    async: false,
				    url: g_actionInstancesTermPath,
				    data: {
				    	data: id,
				    	type: 'edit_comment',
				    	value: value,
				      authenticity_token: g_token},
				    dataType: "json",
				    success: function(data) {
				    	element.parentNode.parentNode.parentNode.parentNode.children[0].style.display = 'inline'
							element.parentNode.parentNode.parentNode.parentNode.children[1].style.display = 'none'

							click = element
							element.parentNode.parentNode.parentNode.parentNode.children[0].getElementsByClassName("comments")[0].innerText = data.comment
				    },
				    error: function(data) {
				     	string = data.responseJSON
			        result = ""
			        for(key in string) {
			          for(value in string[key]) {
			            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
			          }
			        }
			        CDS.show_notification("error", result)
				    }
				  });
				}   
		  }
	  }	
	},

	/**
  * Delete User's comment
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Comment's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	delete_comment : function (id, user_id, obj_id, type) {
		bootbox.confirm("Are you sure you want to remove this comment?", function(result) {
      if (result) {
      	$.ajax({
			    type: "POST",
			    async: false,
			    url: g_actionInstancesTermPath,
			    data: {
			    	data: id,
			    	type: 'delete_comment',
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	if (type== "short_term_objective") {
			    		UserPA.render_comments(this, user_id, obj_id, 'short_term_objective', 'true');
			    	}
			    	else {
			    		UserPA.render_about(user_id)
			    	}
			    	
			    },
			    error: function(data) {
			     	string = data.responseJSON
		        result = ""
		        for(key in string) {
		          for(value in string[key]) {
		            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
		          }
		        }
		        CDS.show_notification("error", result)
			    }
			  });
      }
    });
	},

	/**
  * Render Slot belongs to slot type
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - User's id
  * @param {string} [val] - Slot type value
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	select_slot_type : function (id, val) {
		slot_type = val.value
		UserPA.render_all_slot(user_id, slot_type)		
	},

	/**
  * Slide up and down
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Competency's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	slide : function (id) {
		$("#competency_" + id).fadeToggle()
		// .slideToggle();
	},

	/**
  * Count and set slot number
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Competency's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	set_number_for_competerncy : function (id) {
		$(".competencies").each(function() {
			value = $(this)[0].children[0].children.length
			id = $(this)[0].getAttribute("id");
			// set number for competency
			$("#slot_" + id).append("(" + value + ")")

		})
	},

	/**
  * Count and set slot number
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - SlotAssess's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	add_slot_to_career_path : function (id) {
		bootbox.confirm("Are you sure you want to add this slot to career path?", function(result) {
      if (result) {
				$.ajax({
			    type: "POST",
			    async: false,
			    url: g_actionInstancesTermPath,
			    data: {
			    	data: id,
			    	status: "Not Assessed Yet",
			    	type: "update_status",
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	$(".popover.fade.bottom.in").removeClass('in')
			    	UserPA.render_recently_added(user_id)
			    	UserPA.render_all_slot(user_id);
			    },
			    error: function(data) {
		        CDS.show_notification("error", "An error occurred when adding slot to career path")
			     	// CDS.show_notification("error", "An error occurred when inserting new comment")
			    }
			  });
			}
		})
	},

	/**
  * View more comments
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {string} [view_more_type] - Comment's type
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	view_more_comments : function (view_more_type) {
		UserPA.render_about(user_id, view_more_type)
	},

	/**
  * View more comments
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {element} [e] - Clicked elements
  * @param {integer} [user_id] - User's type
  * @param {integer} [obj_id] - Object's type
  * @param {string} [type] - Comment's type
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	view_all_comments : function (e, user_id, obj_id, type) {
		UserPA.render_comments(e, user_id ,obj_id, 'short_term_objective', 'true');
	},

	/**
  * Set passed slot for user_pa page
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Comment's type
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	calculate_current_title : function (id) {
		$.ajax({
	    type: "POST",
	    async: false,
	    url: g_actionInstancesTermPath,
	    data: {
	    	data: id,
	    	type: "calculate_title",
	      authenticity_token: g_token},
	    dataType: "json",
	    success: function(data) {
	    	console.log(data)
	    },
	    error: function(data) {
        CDS.show_notification("error", "An error occurred when calculating current title")
	    }
	  });
	},

	/**
  * Create short term objective for user
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Curernt Title's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	create_short_term_objective : function (id) {
		short_term_objective = $("#short_term_objective #short_term_objective").val()
		action_plan = $("#short_term_objective #action_plan").val()
		target_date = $("#short_term_objective #target_date").val()


		$.ajax({
	    type: "POST",
	    async: false,
	    url: g_actionInstancesTermPath,
	    data: {
	    	data: id,
	    	type: "create_short_term_objective",
	    	short_term_objective: short_term_objective,
	    	action_plan: action_plan,
	    	target_date: target_date,
	      authenticity_token: g_token},
	    dataType: "json",
	    success: function(data) {
	    	UserPA.render_short_term_objective(user_id)
	    },
	    error: function(data) {	    	
	     	string = data.responseJSON
        result = ""
        for(key in string) {
          for(value in string[key]) {
            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
          }
        }
        CDS.show_notification("error", result)
	    }
	  });
	},

	/**
  * Edit short term objective for user
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {element} [e] - Clicked element
  * @param {integer} [id] - Short Term Objective's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	edit_short_term_objective : function (e, id) {
		short_term_objective = e.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("short_term_objective_value")[0].value
		action_plan = e.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("action_plan_value")[0].value
		target_date = e.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("target_date")[0].value

		if (short_term_objective == "" || action_plan == "") {
			CDS>show_notification("error", "Shor Term Objective or Action Plan can not be left blank")
		}
		else {
			$.ajax({
		    type: "POST",
		    async: false,
		    url: g_actionInstancesTermPath,
		    data: {
		    	data: id,
		    	type: "edit_short_term_objective",
		    	short_term_objective: short_term_objective,
		    	action_plan: action_plan,
		    	target_date: target_date,
		      authenticity_token: g_token},
		    dataType: "json",
		    success: function(data) {
		    	UserPA.cancel_edit_short_term_objective(e)
		    	e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("short_term_objective_show")[0].innerText = data.short_term
		    	e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("action_plan_show")[0].innerText = data.action_plan
		    	date = new Date(data.target_date)
		    	e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName("target_date_show")[0].innerText = date.getDate() + "/" + (date.getMonth()+1) + "/" + date.getFullYear()
		    },
		    error: function(data) {	    	
		     	string = data.responseJSON
	        result = ""
	        for(key in string) {
	          for(value in string[key]) {
	            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
	          }
	        }
	        CDS.show_notification("error", result)
		    }
		  });
		}
		
	},

	/**
  * Delete Short Term Objective
  *
  * @author DangNH <dangnh@elarion.com>
  * @param {integer} [id] - Short Term Objective's id
  * @returns None
  * @deprecated since version 2.0
  * @todo improve this function.
  */
	delete_short_term_objective : function (e, id) {
		bootbox.confirm("Are you sure you want to delete this short term objective?", function(result) {
      if (result) {
				$.ajax({
			    type: "POST",
			    async: false,
			    url: g_actionInstancesTermPath,
			    data: {
			    	data: id,
			    	type: "delete_short_term_objective",
			      authenticity_token: g_token},
			    dataType: "json",
			    success: function(data) {
			    	e.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.style.display = 'none'
			    },
			    error: function(data) {
		        string = data.responseJSON
		        result = ""
		        for(key in string) {
		          for(value in string[key]) {
		            result += CDS.capitaliseFirstLetter(key) + " : " + CDS.capitaliseFirstLetter(string[key][0]) +"<br> " 
		          }
		        }
		        CDS.show_notification("error", result)
			    }
			  });
			}
		})
	},

	}

 	